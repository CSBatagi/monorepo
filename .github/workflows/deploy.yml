name: Deploy to GCP (Backend and Frontend)

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore:
      - '**/README**'
      - '**/test**'
      - '**/Test**'

permissions:
  contents: 'read'
  id-token: 'write'  # Required for Workload Identity
  packages: 'read'   # Required for GitHub Container Registry

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Use a larger runner for faster execution if available
    # runs-on: ubuntu-latest-4-cores  # Uncomment if you have access to larger runners

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Updated to latest version
        with:
          fetch-depth: 2  # Needed for git diff

      - name: Check for changes
        id: changes
        run: |
          echo "backend=$(git diff --name-only HEAD~1 HEAD | grep -q '^backend/' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "frontend-nextjs=$(git diff --name-only HEAD~1 HEAD | grep -q '^frontend-nextjs/' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "docker-compose=$(git diff --name-only HEAD~1 HEAD | grep -q 'docker-compose.yml\|Caddyfile' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Authenticate to GCP
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 363.0.0'

      - name: Create all secret files
        run: |
            echo "CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }}" > .dns_secrets

            echo "MATCHMAKING_TOKEN=${{secrets.AUTH_TOKEN}}" > .frontend_secrets
            echo "SERVERACPASS=${{ secrets.SERVERACPASS }}" >> .frontend_secrets
          
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" > .backend_secrets
            echo "AUTH_TOKEN=${{ secrets.AUTH_TOKEN }}" >> .backend_secrets
            echo "DB_USER=${{ secrets.DB_USER }}" >> .backend_secrets
            echo "RCON_PASSWORD=${{ secrets.RCON_PASSWORD }}" >> .backend_secrets
          
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" > .my_sql_secrets
            echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .my_sql_secrets
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .my_sql_secrets
          
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" > .pg_secrets
            echo "POSTGRES_READONLY_PASSWORD=${{ secrets.POSTGRES_READONLY_PASSWORD }}" >> .pg_secrets
          
            echo '${{ secrets.GOOGLE_CREDENTIALS }}' > credentials.json

      - name: Copy config files to GCP VM
        run: |
          gcloud compute scp \
            --zone=${{ secrets.GCP_ZONE }} \
            ./Caddyfile \
            ./docker-compose.yml \
            ./.dns_secrets \
            ./.backend_secrets \
            ./.frontend_secrets \
            ./.my_sql_secrets \
            ./.pg_secrets \
            ./credentials.json \
            ${{ secrets.GCP_VM_NAME }}:~/ \
            --ssh-key-expire-after=1m

      - name: Set strict permissions on VM
        run: |
          gcloud compute ssh ${{ secrets.GCP_VM_NAME }} --zone=${{ secrets.GCP_ZONE }} \
            --command="chmod 600 ~/.dns_secrets ~/.backend_secrets ~/.frontend_secrets ~/.my_sql_secrets ~/.pg_secrets"

      - name: Cleanup local secrets (optional)
        run: rm -f .dns_secrets .backend_secrets .my_sql_secrets .pg_secrets
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Docker config for GitHub Container Registry
        run: |
          mkdir -p ~/.docker
          echo '{"auths":{"ghcr.io":{"auth":"'$(echo -n "${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}" | base64)'"}}}' > ~/.docker/config.json

      - name: Create .docker directories on VM
        run: |
          gcloud compute ssh ${{ secrets.GCP_VM_NAME }} --zone=${{ secrets.GCP_ZONE }} \
            --command="mkdir -p ~/.docker && sudo mkdir -p /root/.docker"

      - name: Copy Docker config to VM
        run: |
          gcloud compute scp \
            --zone=${{ secrets.GCP_ZONE }} \
            ~/.docker/config.json \
            ${{ secrets.GCP_VM_NAME }}:~/.docker/config.json \
            --ssh-key-expire-after=1m

      - name: Copy Docker config to root user on VM
        run: |
          gcloud compute ssh ${{ secrets.GCP_VM_NAME }} --zone=${{ secrets.GCP_ZONE }} \
            --command="sudo cp ~/.docker/config.json /root/.docker/config.json"

      - name: Update and start containers
        run: |
          SERVICES_TO_UPDATE=""
          if [[ "${{ steps.changes.outputs.backend }}" == "true" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SERVICES_TO_UPDATE="$SERVICES_TO_UPDATE backend"
          fi
          if [[ "${{ steps.changes.outputs.frontend-nextjs }}" == "true" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SERVICES_TO_UPDATE="$SERVICES_TO_UPDATE frontend-nextjs"
          fi
          if [[ "${{ steps.changes.outputs.docker-compose }}" == "true" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # If docker-compose changed, restart all services
            gcloud compute ssh ${{ secrets.GCP_VM_NAME }} --zone=${{ secrets.GCP_ZONE }} \
              --command="sudo docker compose -f ~/docker-compose.yml pull && sudo docker compose -f ~/docker-compose.yml up -d"
          elif [[ -n "$SERVICES_TO_UPDATE" ]]; then
            # Only update specific services
            gcloud compute ssh ${{ secrets.GCP_VM_NAME }} --zone=${{ secrets.GCP_ZONE }} \
              --command="sudo docker compose -f ~/docker-compose.yml pull $SERVICES_TO_UPDATE && sudo docker compose -f ~/docker-compose.yml up -d $SERVICES_TO_UPDATE"
          else
            echo "No services need to be updated"
          fi
