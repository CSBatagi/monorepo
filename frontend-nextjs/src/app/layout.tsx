import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import "@/styles/table-styles.css";
import Layout from "@/components/Layout";
import fs from 'fs/promises';
import path from 'path';
import { AuthProvider } from "@/contexts/AuthContext";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "CS Batağı",
  description: "Generated by create next app",
};

let lastServerKnownTs: string | null = null; // per server runtime
const tsPersistPath = path.join(process.cwd(), 'runtime-data', 'last_timestamp.txt');
async function loadPersistedTs(){
  try { const raw = await fs.readFile(tsPersistPath,'utf-8'); lastServerKnownTs = raw.trim() || null; } catch {}
}
async function persistTs(ts:string){
  try { await fs.mkdir(path.dirname(tsPersistPath), { recursive:true }); await fs.writeFile(tsPersistPath, ts,'utf-8'); } catch {}
}

async function incrementalRefresh() {
  const backendBase = process.env.BACKEND_INTERNAL_URL || 'http://backend:3000';
  const url = new URL('/stats/incremental', backendBase);
  if (lastServerKnownTs) url.searchParams.set('lastKnownTs', lastServerKnownTs);
  url.searchParams.set('_cb', Date.now().toString());
  try {
    const res = await fetch(url.toString(), { cache: 'no-store' });
    if (!res.ok) return;
    const data: any = await res.json().catch(()=>null);
    if (!data) return;
  if (data.serverTimestamp) { lastServerKnownTs = data.serverTimestamp; await persistTs(lastServerKnownTs as string); }
    if (data.updated) {
      const runtimeDir = process.env.STATS_DATA_DIR || path.join(process.cwd(),'runtime-data');
      await fs.mkdir(runtimeDir,{recursive:true});
      const statFiles = [
        'night_avg.json','sonmac_by_date.json','duello_son_mac.json','duello_sezon.json','performance_data.json'
      ];
      for (const base of statFiles) {
        const key = base.replace(/\.json$/, '');
        if (data[key] !== undefined) {
          try { await fs.writeFile(path.join(runtimeDir, base), JSON.stringify(data[key], null, 2),'utf-8'); } catch {}
        }
      }
    }
  } catch {}
}

// Load persisted timestamp once (module scope ensures single flight)
if (!lastServerKnownTs) {
  // Fire and forget; layout will continue and incrementalRefresh will use null on first run
  loadPersistedTs();
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // Trigger incremental refresh once per request lifecycle (doesn't block rendering significantly)
  await incrementalRefresh();
  return (
    <html lang="en">
      <head>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <AuthProvider>
          <Layout>
            <main className="container mx-auto max-w-7xl p-4 md:p-8">
              {children}
            </main>
          </Layout>
        </AuthProvider>
      </body>
    </html>
  );
}
